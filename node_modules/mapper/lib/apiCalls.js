var request             = require('request');
var async               = require('async');

process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';

module.exports.get8x8Data       = function(p, callback) {
    request(
        {
            method: p.method,
            uri: p.protocol + p.host + p.mapData.uri + String(p.mapData.paginationStart),
            proxy: "http://127.0.0.1:8888", // Note the fully-qualified path to Fiddler proxy. No "https" is required, even for https connections to outside.
            headers: {
                "Authorization": 'Basic ' + new Buffer(p.phoneSystemUsername + ':' + p.phoneSystemGetToken).toString('base64')
            }
        },
        function(err, response, body) {
            if(err || response.statusCode != 200) {
                console.log('Error in HTTP call or Status code not 200');
                callback('err');
                return;
            }
            callback(body);
        });
};

module.exports.getAreaCodeData  = function(number, cb) {
    request(
        {
            method: 'GET',
            proxy: "http://127.0.0.1:8888",
            uri: 'http://www.allareacodes.com/' + number
        }, function( error, response, html ) {
        if ( error || response.statusCode != 200) {
            cb('nothing');
        } else {
            cb(html);
        };
    });
};

module.exports.locationToLonLat = function(locationArray, callback) {

    async.mapSeries(locationArray, function(location, cb) {
        var loc = location['location'].replace(" ", "+");
        console.log(loc);
        request('https://maps.googleapis.com/maps/api/geocode/json?address=' + loc + '&key=X', function( error, response, html ) {
            if ( !error && response.statusCode == 200) {
                var json = JSON.parse(html);
                console.log(json);
                if(json.results[0].geometry.location != undefined) {
                    var marker = {
                        location: location['location'],
                        acceptTime: location['datetime'],
                        cord: json.results[0].geometry.location
                    };
                    cb(null, marker);
                } else {
                    cb(null, 'error');
                }
            } else {
                cb(null, 'error');
                return;
            }
        });
    }, function(err, results) {
        console.log(results.length);
        callback(null, results);
    });
};
