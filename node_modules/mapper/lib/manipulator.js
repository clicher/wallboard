var cheerio = require('cheerio');
var _ = require('underscore');
var moment = require('moment');

module.exports.clean8x8MapData = function(jsonData, callback) {

  for (var i = 0; i < jsonData.length; i++) {
    var number = {
      origination: jsonData[i]['origination'].toString(),
      datetime: jsonData[i]['trans-accept-time'],
    };
    jsonData[i] = number;
  }
  ;
  console.log('From cleanMapData: ' + jsonData.length);
  callback(null, jsonData);
};

module.exports.propreTelephone = function(numbersArray, callback) {

  var i = numbersArray.length;
  while (i--) {
    numbersArray[i]['origination'] = numbersArray[i]['origination'].trim();
    numbersArray[i]['origination'] = numbersArray[i]['origination'].replace(
        /\D/g, '');
    numbersArray[i]['origination'] = numbersArray[i]['origination'].replace(
        /^0+/, '');
    numbersArray[i]['origination'] = numbersArray[i]['origination'].replace(
        /^1+/, '');
    if (numbersArray[i]['origination'].length != 10) {
      numbersArray.splice(i, 1);
    }
  }
  for (var i = 0; i < numbersArray.length; i++) {
    numbersArray[i]['location'] = '(' +
        numbersArray[i]['origination'].slice(0, 3) + ') ' +
        numbersArray[i]['origination'].slice(3, 6) + '-';
  }
  console.log('From ProperTelephone: ' + numbersArray.length);
  callback(null, numbersArray);
};

module.exports.tdContains = function(html, number, callback) {

  var $ = cheerio.load(html);
  var td = $('td:contains("' + number['location'] + '")').
      closest('td').
      next('td').
      html();
  if (td) {
    number['location'] = td;
    callback(number);
  } else {
    console.log('----------FOUND NOTHING IN THE PAGE');
    callback('nothing');
    return;
  }
  ;
};

module.exports.rejectByWord = function(o, word) {
  return _.reject(o, function(entry) { return entry == word;});
};

module.exports.rejectByQueue = function(data, queue) {
  return _.reject(_.reject(_.reject(data, function(r) {
    return r['media-type'] != 'Phone';
  }), function(q) {
    return q['trans-transfer-from'] == 'yes';
  }), function(que) {
    return que['queue-name'] == queue;
  });
};

module.exports.extractChanges = function(data, dc, callback) {
  console.log('daily count: ' + dc);
  var d = data.splice(-(data.length - dc));
  callback(null, d);
};

module.exports.getStorageDate = function(date) {

  return new moment(date).format('YYMMDD');
};

module.exports.updateDate = function(data, day) {
  for (var i = 0; i < data.length; i++) {
    data[i]['acceptTime'] = new moment(data[i]['acceptTime']).date(day).
        format();
    console.log(data[i]['acceptTime']);
  }
  return data;
};

module.exports.prepForClient = function(data, callback) {

  var resp = {};

  for (var i = 0; i < data.length; i++) {
    for (var j = 0; j < data[i].length; j++) {
      var dt = new moment(data[i][j]['acceptTime']).format('YYMMDDHHmm');

      _.each(resp, function(value, key) {
        if (value['lat'] == data[i][j]['cord']['lat'] && value['lng'] ==
            data[i][j]['cord']['lng']) {
          var num = Math.random() * (0.220 - 0.0400) + 0.0300;
          num *= Math.floor(Math.random() * 2) == 1 ? 1 : -1;
          var num2 = Math.random() * (0.120 - 0.0200) + 0.0200;
          num2 *= Math.floor(Math.random() * 2) == 1 ? 1 : -1;
          data[i][j]['cord']['lat'] += num;
          data[i][j]['cord']['lng'] += num2;
        }
      });
      resp[dt] = {
        lat: data[i][j]['cord']['lat'],
        lng: data[i][j]['cord']['lng'],
      };
    }
    ;
  }
  ;
  callback(resp);
};

module.exports.flatten = function(array) {
  console.log(_.flatten(array));
  return _.flatten(array);
};
