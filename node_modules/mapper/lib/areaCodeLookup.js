process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';

var async               = require('async');
var request             = require('request');
var cheerio             = require('cheerio');
var _                   = require('underscore');

var c;
var container           = [];
var tableOfContents     = [];


module.exports = function(data, config, callback) {
    container           = [];
    tableOfContents     = [];
    c = config;
    console.log('===================================================4');
    propreTelephone(data, function(err, d) {
        if(! d.length) {
            callback(null, 'NOVALIDNUMBERS');
            return;
        }
        getTOC(d, function(err, da) {
            areaCodeManager(function(err, dat) {
                callback(null, cleanFinalData());
            })
        })
    })
};

function cleanFinalData() {

    return _.filter(_.map(container[1], function(o) {
        return _.omit(o, 'tableOfContents')
    }), function(ob) {
            return ob['location'] != 'NOLOCATIONFOUND';
        });
};

function areaCodeManager(callback) {
    var eachSeriesIndex = 0;
    console.log('NEED TO LOOKUP ' + container[0].length + ' AREA CODES');
    async.eachSeries(tableOfContents, function(number, callback) {
        httpRequest(number, function(err, d) {
            console.log('MAKING AREA CODE LOOKUP: ' + eachSeriesIndex);
            htmlPageIterator(d, eachSeriesIndex, function(err, da) {
                eachSeriesIndex += 1;
                callback(err);
            });
        });
    }, function(err) {
        if(err) {
            console.log('A file failed to process');
        } else {
            console.log('All files have been processed successfully');
            callback(null);
        }
    })
};

function htmlPageIterator(html, key, callback) {

    var $ = cheerio.load(html);
    var td;

    for(var i = 0; i < container[1].length; i++) {
        if (container[1][i]['tableOfContents'] == key) {
            td = $('td:contains("' + container[1][i]['location'] + '")').closest('td').next('td').html();
            if(td) {
                container[1][i]['location'] = td;
            } else {
                container[1][i]['location'] = 'NOLOCATIONFOUND';
            };
        };
    };
    callback(null);
};

function propreTelephone(data, callback) {

    var i = data.length;
    while (i--) {
        data[i]['origination'] = data[i]['origination'].toString().trim();
        data[i]['origination'] = data[i]['origination'].replace(/\D/g, '');
        data[i]['origination'] = data[i]['origination'].replace(/^0+/, '');
        data[i]['origination'] = data[i]['origination'].replace(/^1+/, '');
        if(data[i]['origination'].length != 10) {
            data.splice(i, 1);
        } else if ( data[i]['origination'].slice(0,3) == '888') {
	    data.splice(i, 1);
	}
    }
    for(var i =0; i < data.length; i++) {
        data[i]['location'] = "(" + data[i]['origination'].slice(0, 3) + ") " + data[i]['origination'].slice(3, 6) + "-";
    }
    callback(null, data);
};

function getTOC(data, callback) {

    for(var i = 0; i < data.length; i++) {
        var index = tableOfContents.indexOf(data[i]['origination'].substring(0, 3));
        if(index !== -1) {
            data[i]['tableOfContents'] = index;
        } else {
            tableOfContents.push(data[i]['origination'].substring(0, 3));
            data[i]['tableOfContents'] = (tableOfContents.length - 1);
        }
    }
    container.push(tableOfContents);
    container.push(data);
    callback();
};

function httpRequest(number, cb) {
    console.log('===================================================5');
    request(
        {
            method: c.method,
            //proxy: "http://127.0.0.1:8888",
            uri: c.protocol + c.host + c.uri + number
        }, function( error, response, html ) {
            if ( error || response.statusCode != 200) {
                cb(null, 'ERROR');
            } else {
                cb(null, html);
            };
        });
};
