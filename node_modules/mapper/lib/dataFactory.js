var async = require('async');
var api = require('./apiCalls');
var m = require('./manipulator');
var d = require('domain').create();
var moment = require('moment');

var mongoose = require('mongoose');
var Location = require('../../../app/models/mapLocations');
var db = mongoose.connect('mongodb://localhost/wallboard').connection;

var getLastDate = function(callback) {

  return Location.find({}).
      sort({acceptTime: 'desc'}).
      limit(1).
      exec(function(err, lastLocation) {
        if (err) return console.log(err);
        lastDate = new moment(lastLocation[0].acceptTime).format('YYYY-MM-DD');
        callback();
      });
};
var getDateDifference = function(callback) {
  dateDiff = currentDate.diff(lastDate, 'days');
  callback();
};

var phoneSystemInformation;
var currentDataInStorage;

var index = 0;
var holdDataForDays = 30;
var dataByDays = [];
var dailyCount = 0;
var interval = false;

var getMapInterval = function() {

  async.waterfall([
    manageAsync8x8DataCall(phoneSystemInformation),
    m.clean8x8MapData,
    m.propreTelephone,
    manageGroupingofDataSet,
    manageAsyncAreaCodeCall,
    api.locationToLonLat,
    //joliData
    manageDataByDays,
  ], function(err) {
    console.log(dataByDays);
    console.log('Errors are: ' + err);
    console.log('done');
    //startInterval();
  });
};

var startInterval = function() {

  setTimeout(function() {
    getMapInterval();
  }, 5000);
};

var manageGroupingofDataSet = function(waterfallData, callback) {
  var tableOfContents = [];

  for (var i = 0; i < waterfallData.length; i++) {
    var index = tableOfContents.indexOf(
        waterfallData[i]['origination'].substring(0, 3));
    if (index !== -1) {
      waterfallData[i]['tableOfContents'] = index;
    } else {
      tableOfContents.push(waterfallData[i]['origination'].substring(0, 3));
      waterfallData[i]['tableOfContents'] = (tableOfContents.length - 1);
    }
  }
  ;
  waterfallData.unshift(tableOfContents);
  callback(null, waterfallData);
};

var manageAsyncAreaCodeCall = function(waterfallData, callback) {
  var newWaterfallData = [];
  console.log('Number of Area Codes to Look Up: ' + waterfallData[0].length);
  async.forEachOf(waterfallData[0], function(number, key, cb) {
    console.log('making area code lookup ' + key);
    api.getAreaCodeData(number, function(data) {
      if (data != 'nothing') {
        console.log('FOUND SOME DATA BABY!');
        for (var i = 1; i < waterfallData.length; i++) {
          if (waterfallData[i]['tableOfContents'] == key) {
            m.tdContains(data, waterfallData[i], function(asdf) {
              if (asdf != 'nothing') {
                newWaterfallData.push(asdf);
              }
              ;
            });
          }
          ;
        }
        ;
        cb();
      } else {
        cb();
        return;
      }
      ;
    });
  }, function() {
    console.log('returned from async for each');
    callback(null, newWaterfallData);
  });
};

var manageDataByDays = function(data, callback) {

  if (dataByDays.length == 0) {
    dataByDays.push(data);
    console.log('I go A');
    currentDataInStorage = m.getStorageDate(data[0]['acceptTime']);
    sendToParent(dataByDays);
    callback(null);
  } else if (currentDataInStorage == m.getStorageDate(data[0]['acceptTime'])) {
    console.log('I go B');
    Array.prototype.push.apply(dataByDays[dataByDays.length - 1], data);
    sendToParent(dataByDays);
    callback(null);
  } else {
    console.log('I go C');
    if (dataByDays.length == holdDataForDays) {
      dataByDays.shift();
      dataByDays.push(data);
      sendToParent(dataByDays);
      currentDataInStorage = m.getStorageDate(data[0]['acceptTime']);
      dailyCount = 0;
      callback(null);
    } else {
      dataByDays.push(data);
      sendToParent(dataByDays);
      dailyCount = 0;
      callback(null);
    }
  }
  ;
};

var sendToParent = function(body) {
  m.prepForClient(body, function(resp) {
    process.send({'data': resp});
  });
  return;
};

function startDataFactory(p) {
  phoneSystemInformation = p;
  //getMapInterval();

  var location = new Location(
      {
        acceptTime: new moment(),
        origination: 6207941039,
        cord: {
          lat: 45,
          lng: 34,
        },
      }
  );

  location.save(function(err, location) {
    if (err) return console.error(err);
    console.log('ADDED!');
  });
}

process.on('message', function(m) {
  if (m.initializeFactory) {
    startDataFactory(m.initializeFactory);
  } else {
    process.send('CHILD is replying');
  }
});
